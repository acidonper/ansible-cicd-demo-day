---
- name: Publish Collection to Automation Hub
  hosts: localhost
  gather_facts: false
  vars:
    validate_certs: false

  tasks: 
    - name: get list of groups
      ansible.builtin.uri:
        return_content: true
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/groups/"
        method: GET
        body_format: json
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
        validate_certs: "{{ validate_certs }}"
      register: group_list

    - name: create group admin
      ansible.builtin.uri:
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/groups/"
        method: POST
        body_format: json
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
        status_code:
          - 200
          - 201
        body:
          "name": "admin"
        validate_certs: "{{ validate_certs }}"
      when: 'not "admin" in group_list.content'

    - name: check namespace exists
      ansible.builtin.uri:
        return_content: true
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/my-namespaces/{{ansible_namespace}}/"
        method: GET
        body_format: json
        validate_certs: "{{ validate_certs }}"
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
      register: namespace_list
      ignore_errors: true

    - name: refresh list of groups again to get group IDs
      ansible.builtin.uri:
        return_content: true
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/groups/"
        method: GET
        body_format: json
        validate_certs: "{{ validate_certs }}"
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
      register: group_list

    - name: create namespace
      ansible.builtin.uri:
        return_content: true
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/my-namespaces/"
        method: POST
        body_format: json
        validate_certs: "{{ validate_certs }}"
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
        body:
          "name": "{{ansible_namespace}}"
          "groups":
            - "name": "admin"
              "id": "{{ group_list.json.data[0].id }}"
              "object_permissions":
                - "change_namespace"
                - "upload_to_namespace"
        status_code:
          - 200
          - 201
      when:
        - namespace_list.status == 404

    - name: check if collection already exists
      ansible.builtin.uri:
        return_content: true
        url: https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/repo/published/{{ansible_collection}}/general/
        validate_certs: "{{ validate_certs }}"
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
        method: GET
      register: namespace_collection
      ignore_errors: true

    - name: Git checkout
      ansible.builtin.git:
        repo: '{{ gitlab_repository }}'
        dest: '/tmp/ansible-collection-folder'
        version: '{{ gitlab_branch }}'

    - name: Build the collection
      ansible.builtin.shell:
        cmd: ansible-galaxy collection build . --force
        chdir: "/tmp/ansible-collection-folder/ansible_collections/{{ ansible_namespace }}/{{ ansible_collection }}"
      ignore_errors: yes
      register: collection_tar_path

    - set_fact:
        collection_path: "{{collection_tar_path.stdout | regex_replace('^(.*)at\\s(?P<path>.+)$', '\\g<path>') }}"

    - name: publish collection on private automation hub
      ansible.builtin.shell: 
        cmd: ansible-galaxy collection publish -c -s https://{{ controller_ah_fqdn }}/api/galaxy/content/inbound-{{ ansible_namespace }}/ --api-key {{ automation_hub_private_api_token }} {{ collection_path }}
      when:
        - namespace_collection.status == 404
        - not validate_certs | bool
