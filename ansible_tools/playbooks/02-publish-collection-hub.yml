---
- name: Publish Collection to Automation Hub
  hosts: all
  gather_facts: false

  tasks: 
    - name: get list of groups
      ansible.builtin.uri:
        return_content: true
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/groups/"
        method: GET
        body_format: json
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
        validate_certs: "{{ validate_certs }}"
      register: group_list

    - name: create group admin
      ansible.builtin.uri:
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/groups/"
        method: POST
        body_format: json
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
        status_code:
          - 200
          - 201
        body:
          "name": "admin"
        validate_certs: "{{ validate_certs }}"
      when: 'not "admin" in group_list.content'

    - name: check ansible_ssa namespace exists
      ansible.builtin.uri:
        return_content: true
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/my-namespaces/ansible_ssa/"
        method: GET
        body_format: json
        validate_certs: "{{ validate_certs }}"
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
      register: namespace_list
      ignore_errors: true

    - name: refresh list of groups again to get group IDs
      ansible.builtin.uri:
        return_content: true
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/groups/"
        method: GET
        body_format: json
        validate_certs: "{{ validate_certs }}"
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
      register: group_list

    - name: create ansible_ssa namespace
      ansible.builtin.uri:
        return_content: true
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/my-namespaces/"
        method: POST
        body_format: json
        validate_certs: "{{ validate_certs }}"
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
        body:
          "name": "ansible_ssa"
          "groups":
            - "name": "admin"
              "id": "{{ group_list.json.data[0].id }}"
              "object_permissions":
                - "change_namespace"
                - "upload_to_namespace"
        status_code:
          - 200
          - 201
      when:
        - namespace_list.status == 404

    - name: check if collection already exists
      ansible.builtin.uri:
        return_content: true
        url: https://{{ controller_ah_fqdn }}/api/galaxy/_ui/v1/repo/published/ansible_ssa/general/
        validate_certs: "{{ validate_certs }}"
        headers:
          Authorization: "Token {{ automation_hub_private_api_token }}"
        method: GET
      register: ansible_ssa_collection
      ignore_errors: true

    - name: check for latest Ansible SSA collection version
      ansible.builtin.uri:
        url: https://gitlab.com/api/v4/projects/24587668/releases
        return_content: true
      register: ansible_ssa_collection_release

    - name: download latest version of Ansible SSA collection
      ansible.builtin.get_url:
        url: https://gitlab.com/ansible-ssa/ansible-ssa-collection/-/raw/{{ ansible_ssa_collection_release.json[0].tag_name }}/ansible_ssa-general-{{ ansible_ssa_collection_release.json[0].tag_name | replace ('v','') }}.tar.gz?inline=false
        dest: /tmp/ansible_ssa-general-{{ ansible_ssa_collection_release.json[0].tag_name | replace ('v','') }}.tar.gz
      register: ansible_ssa_collection_download

    - name: publish Ansible SSA collection on private automation hub
      ansible.builtin.command: ansible-galaxy collection publish -s https://{{ controller_ah_fqdn }}/api/galaxy/content/inbound-ansible_ssa/ --token "{{ authentication_token.json.token }}" {{ ansible_ssa_collection_download.dest }}
      notify: approve Ansible SSA collection
      when:
        - ansible_ssa_collection.status == 404
        - validate_certs | bool

    - name: publish Ansible SSA collection on private automation hub
      ansible.builtin.command: ansible-galaxy collection publish -c -s https://{{ controller_ah_fqdn }}/api/galaxy/content/inbound-ansible_ssa/ --token "{{ authentication_token.json.token }}" {{ ansible_ssa_collection_download.dest }}
      notify: approve Ansible SSA collection
      when:
        - ansible_ssa_collection.status == 404
        - not validate_certs | bool

    - name: approve Ansible SSA collection
      ansible.builtin.uri:
        url: "https://{{ controller_ah_fqdn }}/api/galaxy/v3/collections/ansible_ssa/general/versions/{{ ansible_ssa_collection_release.json[0].tag_name | replace ('v','')  }}/move/staging/published/"
        method: POST
        body_format: json
        validate_certs: "{{ not letsencrypt_staging | bool }}"
        headers:
          Authorization: "Token {{ authentication_token.json.token }}"
        status_code:
          - 200
          - 202
